#BlueJ class context
comment0.target=Stock
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Stock\ here.\r\n\ \r\n\ @author\ (Diego\ Gonz\u00E1lez\ -\ Cristian\ Castellanos)\ \r\n\ @version\ (2.0\ 23/02/2021)\r\n
comment1.params=row\ column
comment1.target=Stock(int,\ int)
comment1.text=\r\n\ Constructor\ object\ for\ class\ Stock.\r\n\ @param\ row\r\n\ @param\ column\r\n
comment10.params=crates
comment10.target=void\ createMatrix(int[][])
comment10.text=\r\n\ Function\ created\ to\ generate\ \r\n\ the\ complete\ stock\ matrix\ from\ values\ \u200B\u200Bgiven\ by\ the\ user\r\n\ @param\ crates\r\n
comment11.params=numbers
comment11.target=void\ store(int[])
comment11.text=\r\n\ function\ created\ to\ place\ a\ box\ in\ \r\n\ the\ position\ that\ the\ user\ says\ \r\n\ (the\ coordinates\ of\ where\ to\ leave\ the\ box\ are\ in\ the\ arrangement)\r\n\ \r\n\ @param\ numbers[]\ \ -->\ array\ of\ numbers,\ contains\ the\ row\ and\ the\ column\r\n
comment12.params=row\ column
comment12.target=void\ store(int,\ int)
comment12.text=\r\n\ function\ created\ to\ add\ a\ box\r\n\ in\ a\ given\ row\ and\ column\r\n\ \r\n\ @param\ row\ \ -->\ the\ number\ of\ the\ row\r\n\ @param\ column\ -->\ the\ number\ of\ the\ column\r\n
comment13.params=vector
comment13.target=int\ maxRow(int[])
comment13.text=\r\n\ Function\ created\ to\ calculate\ the\ maximum\ \r\n\ value\ of\ an\ array\ of\ numbers\r\n\r\n\ @param\ integer[]\ vector\ -->\ the\ array\ contains\ numbers\r\n\r\n
comment14.params=matriz
comment14.target=int[]\ maxColumns(int[][])
comment14.text=\r\n\ Function\ created\ to\ calculate\ the\ maximum\ value\ of\ a\ column,\ \r\n\ this\ is\ for\ when\ you\ have\ a\ matrix\r\n\r\n\ @param\ integer[][]\ matriz\ -->\ the\ matrix\ contains\ numbers\ \r\n\r\n
comment15.params=stockValues
comment15.target=void\ refresh(int[][])
comment15.text=\r\n\ Function\ created\ to\ refresh\ the\ values\ \u200B\u200Bof\ the\ arraylists\ \r\n\ with\ respect\ to\ the\ values\ \u200B\u200Bof\ the\ stockvalues,\ \r\n\ it\ serves\ for\ cases\ in\ which\ we\ add\ boxes\r\n
comment16.params=stockValues
comment16.target=void\ setStockValues(int[][])
comment17.params=length\ stockValues\ horizontal
comment17.target=java.util.ArrayList\ createStock(int,\ int[],\ int)
comment17.text=\r\n\ El\ metodo\ se\ encarga\ de\ crear\ una\ vista\ segun\ los\ parametros\r\n\ @param\ length\ largo\ de\ la\ vista\r\n\ @param\ stockValues\ arreglo\ de\ enteros,\ representa\ el\ vector\ de\ maximos\ por\ columna\ para\ la\ vista\r\n\ @param\ horizontal\ movimiento\ horizontal\ que\ debe\ hacer\ la\ vista.\r\n\ @return\ newStock\ ArrayList\ de\ Stack\ que\ representa\ la\ vista\r\n
comment18.params=moveV\ moveH
comment18.target=Rectangle\ createCare(int,\ int)
comment18.text=\r\nLa\ funcion\ retorna\ un\ rectangulo\ con\ los\ movimientos\ indicados.\r\n@param\ moveV\ movimiento\ vertical\ que\ debe\ realizar\ la\ caja.\r\n@param\ moveH\ moviemiento\ horizontal\ que\ debe\ realizar\ la\ caja.\r\n@return\ Retorna\ la\ caja\ con\ los\ movimientos\ realizados\r\n
comment19.params=
comment19.target=int[][]\ setValues()
comment19.text=\r\n\ Function\ created\ to\ return\ the\ array\ called\ stockvalues\r\n\ @return\ \ -->\ \ matrix[][]\r\n
comment2.params=
comment2.target=Rectangle[][]\ fillArrays()
comment2.text=\r\n\ function\ created\ to\ fill\ the\ matrices\ with\ rectangles,\ \r\n\ this\ to\ now\ make\ each\ of\ the\ rectangles\ visible\r\n
comment20.params=visible
comment20.target=void\ topviewVisible(boolean)
comment20.text=\r\n\ function\ created\ to\ make\ the\ top\ view\ visible\ from\ the\ values\ \u200B\u200Bobtained\ in\ stockvalues\ \r\n
comment21.params=stock\ visible
comment21.target=void\ stockVisible(java.util.ArrayList,\ boolean)
comment22.params=
comment22.target=void\ makeInvisible()
comment23.params=
comment23.target=void\ makeVisible()
comment23.text=\r\n\ function\ created\ to\ call\ all\ the\ methods\ that\ make\ the\ views\ visible\r\n
comment24.params=
comment24.target=int\ getMax()
comment25.params=
comment25.target=int[][]\ getMaxUp()
comment26.params=
comment26.target=int[]\ getMaxFront()
comment27.params=
comment27.target=int[]\ getMaxSide()
comment3.params=stock\ length
comment3.target=void\ fillViews(java.util.ArrayList,\ int)
comment4.params=
comment4.target=int[][]\ getValues()
comment5.params=
comment5.target=java.util.ArrayList\ getSide()
comment6.params=
comment6.target=java.util.ArrayList\ getFront()
comment7.params=
comment7.target=Rectangle[][]\ getUp()
comment8.params=row\ column
comment8.target=int[]\ getPositionArray(int,\ int)
comment8.text=\r\n\ Function\ created\ to\ return\ row\ and\ column\ in\ array\ mode\r\n\ @param\ row\r\n\ @param\ column\r\n\ @return\ int[]\ position\r\n
comment9.params=cant\ position
comment9.target=void\ takeCrates(int,\ int[])
comment9.text=\r\n\ Function\ created\ to\ insert\ the\ boxes\ in\ \r\n\ the\ indicated\ position\ as\ many\ times\ as\ the\ user\ says\r\n\ @param\ cant\r\n\ @param\ position\r\n
numComments=28
