#BlueJ class context
comment0.target=Robbery
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Robbery\ here.\r\n\ \r\n\ @author\ (Diego\ Gonz\u00E1lez\ -\ Cristian\ Castellanos)\ \r\n\ @version\ (2.0\ 23/02/2021)\r\n
comment1.params=row\ column\ maxStock
comment1.target=Robbery(int,\ int,\ int)
comment1.text=\r\n\ Constructor\ object\ for\ class\ robbery.\r\n\ @param\ row\r\n\ @param\ column\r\n
comment10.params=
comment10.target=java.util.ArrayList\ getSide()
comment11.params=
comment11.target=java.util.ArrayList\ getFront()
comment12.params=
comment12.target=Rectangle[][]\ getUp()
comment13.params=row\ column
comment13.target=int[]\ getPositionArray(int,\ int)
comment13.text=\r\n\ Function\ created\ to\ return\ row\ and\ column\ in\ array\ mode\r\n\ @param\ row\r\n\ @param\ column\r\n\ @return\ int[]\ position\r\n
comment14.params=Views\ maxRow
comment14.target=void\ copy(int[][],\ int)
comment14.text=\r\n\ Function\ created\ to\ copy\ the\ values\ \u200B\u200Bof\ the\ parameter\ array\ \r\n\ to\ robberyValues\r\n\ @param\ Views\r\n
comment15.params=row\ column
comment15.target=void\ steal(int,\ int)
comment15.text=\r\n\ Function\ created\ to\ steal\ a\ box\ in\ the\ position\ \r\n\ (row,\ column)\ that\ the\ user\ gives\ us\r\n\ @param\ row\r\n\ @param\ column\r\n
comment16.params=crate
comment16.target=void\ steal(int[])
comment16.text=\r\n\ Function\ created\ to\ steal\ a\ box\ in\ the\ position\ of\ the\ user.\ \r\n\ The\ positions\ are\ in\ an\ array\ [2]\ of\ integers\r\n\ @param\ crate\r\n
comment17.params=
comment17.target=int[]\ Return()
comment17.text=\r\n\ Function\ created\ to\ return\ the\ last\ stolen\ box\r\n
comment18.params=from\ to
comment18.target=void\ arrange(int[],\ int[])
comment18.text=\r\n\ Function\ created\ to\ reorganize\ a\ box\ from\ a\ certain\ position,\ \r\n\ to\ the\ position\ that\ the\ user\ wants\r\n\ @param\ from\r\n\ @param\ to\r\n
comment19.params=
comment19.target=int\ stolen()
comment19.text=\r\n\ Function\ created\ to\ return\ the\ number\ of\ boxes\ in\ the\ robbery\ plan\r\n\ @return\ int\ answer\r\n
comment2.params=color
comment2.target=Rectangle[][]\ fillArrays(java.lang.String)
comment2.text=\r\n\ function\ created\ to\ fill\ the\ matrices\ with\ rectangles,\ \r\n\ this\ to\ now\ make\ each\ of\ the\ rectangles\ visible\r\n
comment20.params=visible
comment20.target=void\ topviewVisible(boolean)
comment20.text=\r\n\ function\ created\ to\ make\ the\ top\ view\ visible\ from\ the\ values\ \u200B\u200Bobtained\ in\ stockvalues\ \r\n
comment21.params=robbery\ visible
comment21.target=void\ robberyVisible(java.util.ArrayList,\ boolean)
comment22.params=
comment22.target=void\ makeInvisible()
comment23.params=
comment23.target=void\ makeVisible()
comment23.text=\r\n\ function\ created\ to\ call\ all\ the\ methods\ that\ make\ the\ views\ visible\r\n
comment24.params=
comment24.target=int[][]\ getMaxUp()
comment25.params=
comment25.target=int[]\ getMaxFront()
comment26.params=
comment26.target=int[]\ getMaxSide()
comment3.params=stock\ length
comment3.target=void\ fillViews(java.util.ArrayList,\ int)
comment3.text=\r\n\ Function\ created\ to\ fill\ the\ view\ \r\n\ (which\ is\ created\ with\ arraylists)\ with\ empty\ stacks\r\n\ @param\ stock\r\n\ @param\ length\r\n
comment4.params=vector
comment4.target=int\ maxRow(int[])
comment4.text=\r\n\ Function\ created\ to\ calculate\ the\ maximum\ \r\n\ value\ of\ an\ array\ of\ numbers\r\n\r\n\ @param\ integer[]\ vector\ -->\ the\ array\ contains\ numbers\r\n\r\n
comment5.params=matriz
comment5.target=int[]\ maxColumns(int[][])
comment5.text=\r\n\ Function\ created\ to\ calculate\ the\ maximum\ value\ of\ a\ column,\ \r\n\ this\ is\ for\ when\ you\ have\ a\ matrix\r\n\r\n\ @param\ integer[][]\ matriz\ -->\ the\ matrix\ contains\ numbers\ \r\n\r\n
comment6.params=color
comment6.target=void\ refresh(java.lang.String)
comment6.text=\r\n\ Function\ created\ to\ refresh\ the\ values\ \u200B\u200Bof\ the\ arraylists\ \r\n\ with\ respect\ to\ the\ values\ \u200B\u200Bof\ the\ stockvalues,\ \r\n\ it\ serves\ for\ cases\ in\ which\ we\ add\ boxes\r\n
comment7.params=length\ robberyValues\ horizontal\ color
comment7.target=java.util.ArrayList\ createRobbery(int,\ int[],\ int,\ java.lang.String)
comment7.text=\r\n\ El\ metodo\ se\ encarga\ de\ crear\ una\ vista\ segun\ los\ parametros\r\n\ @param\ length\ largo\ de\ la\ vista\r\n\ @param\ robberyValues\ arreglo\ de\ enteros,\ representa\ el\ vector\ de\ maximos\ por\ columna\ para\ la\ vista\r\n\ @param\ horizontal\ movimiento\ horizontal\ que\ debe\ hacer\ la\ vista.\r\n\ @return\ newRobbery\ ArrayList\ de\ Stack\ que\ representa\ la\ vista\r\n
comment8.params=moveV\ moveH\ color
comment8.target=Rectangle\ createCare(int,\ int,\ java.lang.String)
comment8.text=\r\nLa\ funcion\ retorna\ un\ rectangulo\ con\ los\ movimientos\ indicados.\r\n@param\ moveV\ movimiento\ vertical\ que\ debe\ realizar\ la\ caja.\r\n@param\ moveH\ moviemiento\ horizontal\ que\ debe\ realizar\ la\ caja.\r\n@return\ Retorna\ la\ caja\ con\ los\ movimientos\ realizados\r\n
comment9.params=
comment9.target=int[][]\ getValues()
comment9.text=\r\n\ Function\ created\ to\ return\ the\ array\ called\ stockvalues\r\n\ @return\ \ -->\ \ matrix[][]\r\n
numComments=27
